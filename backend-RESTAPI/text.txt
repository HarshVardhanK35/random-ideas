----------------------------------------------------- Backend -> REST API -----------------------------------------------------

----------------------------------------------------- PART-01 -----------------------------------------------------
1. Here we are just creating the Backend-API
    -> Which are routes that we can make HTTP requests to get ideas
    -> in addition to get we can create, read, update and delete ideas

Steps to be followed:
--------------------
-> Initialize a package.json --- "npm init"
(package name: randomideas; description: Ideas sharing app; entry point: server.js)

-> "npm i express" (not as dev-dependency)
(if the npm is the older version... update it with "npm i -g npm@`latest-version")

-> create a file --- server.js
(create a server )

-> to start the server(run the file server.js)
    --- change the test scripts inside package.json to "start": "node server.js"
    --- open the terminal and run the command... "npm start".
    --- use postman to make "GET"- request.

----------------------------------------------------- PART-02 -> nodemon & route-cleanup -----------------------------------------------------
intro:
------
-> every time we are restarting the server if there are any modifications.
-> Installing nodemon and which continuously watches over the changes and restarts the server.

1. install nodemon using the command: "npm i -D nodemon"

2.1 change the start script to "start": "nodemon `filename.js`"
-> ex: "start": "nodemon server.js"
-> use command "npm start" --- to start server
2.2 or else --- add another script inside "package.json" that is... "dev": "nodemon server.js"
-> for this use command "npm run dev" --- to start server

3. For cleaning up the Routes...
-> create a separate folder "routes" this is gonna be a ideas-route folder
-> create a file "ideas.js"
-> import express and router from express.
-> bring in all the routes and ideas object that were created in main "server.js"
    (change the "app.get" to "router.get")
    (change the routes too... because we are linking the ideas.js file to "api/ideas")
-> bring the routes/ideas.js into server.js
-> create middlewares in "server.js" which access the routes from "ideas.js".
    (which are used... when we want to go to (/api/ideas)... look into the routes folder(routes/ideas) that was imported)


----------------------------------------------------- PART-03 -> POST requests -----------------------------------------------------
intro:
-----
-> add an idea by hitting a specific endpoint.
/*
  ----------------------------------------------------- REST structure of EndPoints -----------------------------------------------------
  * GET- get all ideas- (/api/ideas)
  * GET- get an idea- GET req to an id of an idea- (/api/ideas/:id)
  * POST- Create an idea- POST req to (/api/ideas)
  * DELETE- Delete an idea- DELETE req to (/api/ideas/:id)
  * PUT- Update an idea- PUT req to (/api/ideas/:id)
*/
-> hit the endpoint (/api/ideas)

1. we have to add an idea... means we have to send the data.
2. we do that with an HTTP request is through the body.
3. in order to do that we have to add a middleware.
----------------------------------------------------- MIDDLEWARE -----------------------------------------------------
4. MIDDLEWARE:
-> something that happens between the request and response.
-> acts as a bridge between different parts of a system
-> It intercepts incoming requests and outgoing responses,
    enabling you to perform tasks such as logging, authentication, error handling, and data transformation.
----------------------------------------------------------------------------------------------------------------------
5. we can send data either by form data or raw JSON.
6. after initializer that is (const app = express()) in server.js file...
 -> Initialize a body parser middleware... ("app.use(express.json())") -> allows us to send the raw json to server
 -> app.use(express.urlencoded({ extended: false }))

NOTE:
* These above middlewares are commonly used in all our APIs.
* this allows us to do by adding this middleware on the request object.

7. with this middleware we get the request and we can access the body with (request.body.<any-field>)
    ex: request.body.id (access the id from an object)
8. the format of an idea object is...
{
    id: "", ---> (when we use a DB the Id for every POST request will be automatically generated)
    text: "",
    tag: "",
    username: "",
    date: new Date()
}
const idea = {
    id: ideas.length + 1,
    text: req.body.text,
    tag: req.body.tag,
    username: req.body.username,
    date: new Date().toISOString().slice(0, 10)
}

Note:
-> In the post request, the data was sticked to an array in the memory.
-> if we reload the server we will lose the added object


----------------------------------------------------- PART-04 -> PUT- to Update & DELETE- to delete -----------------------------------------------------
intro:
-----
-> PUT request on single object (/api/ideas/:id)- two fields that user can update are "tag" and "text"
1. idea.text = req.body.text || idea.text;
2. idea.tag = req.body.tag || idea.tag;

-> DELETE req is also on single object (/api/ideas/:id)
1. find the id with params.
2. find the index from the ideas array (indexOf() method).
3. use splice method to remove the idea from ideas.

Note:
-> Now we have full Rest API for create, update, read and delete the ideas

---------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- MONGODB -----------------------------------------------------
-> open mongodb atlas
-> create a new project -> create a database -> select Free cluster (M0) that is Cluster0
-> change USERNAME & PWD -> remove the previous IP address and enter 0.0.0.0 and click on "add entry" -> Finish and close
-> click on "connect" -> select drivers and follow the instructions or copy the "connection string"
-> store the string into create a ".env" file (to store environment variables) -> "mainFolder/.env"
-> on env file create a variable called "MONGO_URI" and assign to the copied string
--- the string has to be modified at <password>: enter your password created on mongodb/atlas website
--- right before the "?" mark enter the database name.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------- Mongoose Connect & DotEnv -----------------------------------------------------
intro- MONGOOSE:
---------------
-> we are going to use a tool called "MONGOOSE" to connect to MONGODB through our application.
-> Mongoose: Object Data Mapper (ODM)
-> it is a package an we can install with NPM
 --- connect to our database using mongoose.connect()
 --- we create a model for all of our resources.

intro- (.env):
------------
-> this package allows us to use ".env" file.
-> we can access our variables created in the .env file with process.env.<variable_name>
    --- example: process.env.MONGO_URI
->

steps to be followed...
-----------------------
1. "npm i dotenv mongoose"
    --- to install "dotenv" and "mongoose" packages
2. add ".env" into ".gitignore" file.
    --- inside ".env" add "PORT" variable and store 8000(temporarily) but actual PORT number would be 5000.

3.1 ____________ Part-1 -> DotEnv ____________
    --- import "dotenv" into server.js with no variable so simply <require("dotenv")>
    --- instead of setting port to 5000 in "server.js" file, set PORT variable to "process.env.PORT"
        --- if "process.env.PORT" was not found use 5000 ("process.env.PORT" || 5000)
        --- if 8000 works
__________________________________________
Note:
-> whenever we change something inside .env file we have to restart the server even if we are using nodemon
__________________________________________

3.2 ____________ Part-2 -> Mongoose Connect ____________
    --- create a "config" folder and create <db.js> to connect our application to mongodb through mongoose.
        --- helps in interaction with mongodb databases and to perform various database operations such as querying, updating, and deleting documents
    --- we have to use "mongoose.connect" which usually returns a promise so we have to use async and await
        --- see the code inside <rootFolder>/config/db.js for more info.

----------------------------------------------------- PART-05 -> Create a Mongoose Schema and Model -----------------------------------------------------
Intro:
------
-> A model takes a schema, which are basically the fields for resource.
-> convention to start a file for models is start the filename with capitals and should be singular.
    --- ex: Idea.js... not ideas.js
-> create a folder with name --- models and create a file in it with name --- Idea.js

steps to be followed to create a schema:
----------------------------------------
1. import mongoose --- <const mongoose = require("mongoose")>
2. create a Schema Instance --- <const IdeaSchema = new mongoose.Schema( { } )>
3. this schema takes in an object with all the different fields.
    --- we have to include... { text, tag, username, date }
    --- every field is another object with {type: "type of the fields --- (string, number etc)"}
    --- we gonna use {required: [true, 'Please add a text field] --- (backend validation)} only for text field not for all fields
    --- date field gonna take default key-value set with type field that is: { default: Date.now }
    --- Note: (id is not necessary cause that will be automatically generated by mongodb itself)
4. export the schema with --- <module.exports = mongoose.model("Idea", "IdeaSchema")>
5. now we can bring the model into routes and we can initialize it so that we can make queries.

----------------------------------------------------- PART-06 -> Database Queries -----------------------------------------------------
intro:
-----
-> now we are going to update our ideas routes to use data from the database instead of the hard-coded data

steps to be followed:
---------------------
1. import the models into ideas.js route into a variable with capital letter at first "Idea" <const Idea = require('./models/Idea.js')>